<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Python每周挑战]]></title>
  <subtitle><![CDATA[每周实战一题，每周前进一步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pyweek.github.io/"/>
  <updated>2015-12-20T15:32:39.821Z</updated>
  <id>http://pyweek.github.io/</id>
  
  <author>
    <name><![CDATA[阿驹]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[处理1亿个QQ号]]></title>
    <link href="http://pyweek.github.io/challenges/2015/12/20/handle-100-million-qq-numbers.html"/>
    <id>http://pyweek.github.io/challenges/2015/12/20/handle-100-million-qq-numbers.html</id>
    <published>2015-12-20T09:49:22.000Z</published>
    <updated>2015-12-20T15:32:39.821Z</updated>
    <content type="html"><![CDATA[<h3 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h3><ol>
<li><p>先实现生成符合要求的QQ号方法，分别生成 1 亿个随机排列且不重复的QQ号至 a.txt , 再生成 100 万个至 b.txt。请实现以下函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_qq_numbers</span><span class="params">(m, n, k, output)</span>:</span></span><br><span class="line">   <span class="string">"""</span><br><span class="line">   用于生成QQ号的函数, 即[m, n]区间内k个不重复的随机数。</span><br><span class="line">   :param m: int, 所生成的QQ号须大于正整数 m, 大于等于10000</span><br><span class="line">   :param n: int, 所生成的QQ号须小于正整数 n, 小于等于9999999999</span><br><span class="line">   :param k: int, 一共生成 k 个QQ号</span><br><span class="line">   :param output: string, 文件名，生成结果保存至output中， 每行一个QQ号</span><br><span class="line">   """</span></span><br><span class="line">   <span class="comment"># TODO</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>a.txt 中有 1 亿个， b.txt 中有 100 万个随机排列的QQ号。实现并、交、差运算， 并分别输出结果至union.txt, intersection.txt, difference.txt 。</p>
</li>
</ol>
<h3 id="u9898_u76EE_u8981_u6C42"><a href="#u9898_u76EE_u8981_u6C42" class="headerlink" title="题目要求"></a>题目要求</h3><ol>
<li>所有输入输出均以UTF8编码形式处理；</li>
<li>只允许使用CPython标准库和内置函数提供的方法、模块；</li>
<li>以上两小题都必须能运行出结果才有可能获得 “参考答案” 的殊荣；</li>
<li>Python 版本仅限于 2.7 或 3.4+, 小版本号不限；</li>
<li>必须符合PEP8编码风格, 会进行编码风格检查.</li>
</ol>
<h3 id="u8BC4_u6BD4_u89C4_u5219"><a href="#u8BC4_u6BD4_u89C4_u5219" class="headerlink" title="评比规则"></a>评比规则</h3><p>  生成一次1亿个QQ号，交并差运算各执行一次，就算一遍完整的运行， 三遍完整的运行时间平均值用于评比。</p>
<ol>
<li>首选运行时间更少的；</li>
<li>若时间相差很小， 选代码行数(不算注释)更少的(我们认为符合编码规范的同时，更少的代码行在相当程度上意味着更简洁灵巧的解题思路)；</li>
<li>若代码行数相差很小， 选使用较新Python版本的；</li>
<li>以上两点相差很小的定量是：相比之下，更少的那个答案的10% ，如用时80s，那另一个必须要在88s之内完成，才进行下一项比拼;</li>
<li>同样的版本号下，选择使用了语言新特性的；</li>
<li>更倾向于新版本与新特性是为了鼓励程序猿与时俱进；</li>
<li>评比完成后，会在“参考答案”中写明和第二名相比，为何选择它作为第一名。</li>
</ol>
<h3 id="u63D0_u4EA4_u7B54_u6848"><a href="#u63D0_u4EA4_u7B54_u6848" class="headerlink" title="提交答案"></a>提交答案</h3><p>   参考 “帮助” 页面</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h3><ol>
<li><p>先实现生成符合要求的QQ号方法]]>
    </summary>
    
      <category term="question" scheme="http://pyweek.github.io/tags/question/"/>
    
      <category term="challenges" scheme="http://pyweek.github.io/categories/challenges/"/>
    
  </entry>
  
</feed>
